# Define a list of filters that is cycles through when pressing 'f'. This
# options supersedes the filter option. If not defined then filter is used
# instead. If defined then this filter list is used exclusively and the filter
# option is ignored.
filters = "BW_LP(4,0.1)"

# Activate the first filter of the configured filter list after startup. This
# is equivalent to pressing 'f'.
autoApplyFilter = true

# Define the buffer size in seconds of the ring bu of each trace.
bufferSize = 600

scheme.records.lineWidth = 3

# Stream group profiles to be considered which must be defined in group
# section. Use comma separation for a list of groups.
streams.groups = kilauea, maunaloa, erz, pahala

# List of channels codes to be displayed within this group. List items may
# contain wildcards at any position and are separated by comma. The list is
# intersected with all channels configured in inventory.
# Example:
# CX.*..BH?,PF.BON.00.HH? : all BH streams of the CX network and all HH streams
# of PF.BON.00
streams.group.erz.members = HV.STCD.*.*,\
                            HV.NPOC.*.*,\
                            HV.JCUZ.*.*,\
                            HV.KUPD.*.*,\
                            HV.JOKA.*.*,\
                            HV.KLPN.*.*,\
                            HV.KIND.*.*,\
                            HV.KLUD.*.*,\
                            HV.ERZ3.*.*

# Define the color gradient used to generate the trace color for each group
# member. When given, the value in "streams.group.$profile.pen.color" is
# ignored. The colors are distributed equally and given in hexadecimal
# representation or by or :term:`color keyword names`. The stop points can be
# set at any value. The final trace color will be interpolated from the
# normalized gradient where the value range is scaled to [0,1].
# Format: value1:color1,value2:color2
# Examples:
# 0:yellow,1:green
# 0:FFBF00,1:C70039
streams.group.erz.pen.gradient = 0:FFCC80, 1:FF8F00

# The width of the pen.
streams.group.erz.pen.width = 3.0

# List of channels codes to be displayed within this group. List items may
# contain wildcards at any position and are separated by comma. The list is
# intersected with all channels configured in inventory.
# Example:
# CX.*..BH?,PF.BON.00.HH? : all BH streams of the CX network and all HH streams
# of PF.BON.00
streams.group.kilauea.members = HV.PAUD.*.*,\
                                HV.DEVL.*.*,\
                                HV.AHUD.*.*,\
                                HV.PUHI.*.*,\
                                HV.NAHU.*.*,\
                                HV.RSDD.*.*,\
                                HV.BYL.*.*,\
                                HV.CPKD.*.*,\
                                HV.HAT.*.*,\
                                HV.KKO.*.*,\
                                HV.OTLD.*.*,\
                                HV.SBL.*.*,\
                                HV.SDH.*.*,\
                                HV.UWE.*.*,\
                                HV.RIMD.*.*,\
                                HV.WRM.*.*

# Define the color gradient used to generate the trace color for each group
# member. When given, the value in "streams.group.$profile.pen.color" is
# ignored. The colors are distributed equally and given in hexadecimal
# representation or by or :term:`color keyword names`. The stop points can be
# set at any value. The final trace color will be interpolated from the
# normalized gradient where the value range is scaled to [0,1].
# Format: value1:color1,value2:color2
# Examples:
# 0:yellow,1:green
# 0:FFBF00,1:C70039
streams.group.kilauea.pen.gradient = 0:f2a39c, 1:c70017

# The width of the pen.
streams.group.kilauea.pen.width = 3.0

# List of channels codes to be displayed within this group. List items may
# contain wildcards at any position and are separated by comma. The list is
# intersected with all channels configured in inventory.
# Example:
# CX.*..BH?,PF.BON.00.HH? : all BH streams of the CX network and all HH streams
# of PF.BON.00
streams.group.maunaloa.members = HV.HSSD.*.*,\
                                 HV.PLAD.*.*,\
                                 HV.ALEP.*.*,\
                                 HV.DAND.*.*,\
                                 HV.TOUO.*.*,\
                                 HV.TRAD.*.*,\
                                 HV.ELEP.*.*,\
                                 HV.RCOD.*.*,\
                                 HV.MOKD.*.*,\
                                 HV.SWRD.*.*

# Define the color gradient used to generate the trace color for each group
# member. When given, the value in "streams.group.$profile.pen.color" is
# ignored. The colors are distributed equally and given in hexadecimal
# representation or by or :term:`color keyword names`. The stop points can be
# set at any value. The final trace color will be interpolated from the
# normalized gradient where the value range is scaled to [0,1].
# Format: value1:color1,value2:color2
# Examples:
# 0:yellow,1:green
# 0:FFBF00,1:C70039
streams.group.maunaloa.pen.gradient = 0:53c9f7, 1:1602c9

# The width of the pen.
streams.group.maunaloa.pen.width = 3.0

# List of channels codes to be displayed within this group. List items may
# contain wildcards at any position and are separated by comma. The list is
# intersected with all channels configured in inventory.
# Example:
# CX.*..BH?,PF.BON.00.HH? : all BH streams of the CX network and all HH streams
# of PF.BON.00
streams.group.pahala.members = HV.AIND.*.*,\
                               HV.HLPD.*.*,\
                               PT.KHU.*.*,\
                               HV.WOOD.*.*,\
                               NP.2812.*.*,\
                               HV.HTCD.*.*,\
                               HV.PPLD.*.*

# Define the color gradient used to generate the trace color for each group
# member. When given, the value in "streams.group.$profile.pen.color" is
# ignored. The colors are distributed equally and given in hexadecimal
# representation or by or :term:`color keyword names`. The stop points can be
# set at any value. The final trace color will be interpolated from the
# normalized gradient where the value range is scaled to [0,1].
# Format: value1:color1,value2:color2
# Examples:
# 0:yellow,1:green
# 0:FFBF00,1:C70039
streams.group.pahala.pen.gradient = 0:4cff6a, 1:37cd21

# The width of the pen.
streams.group.pahala.pen.width = 3.0

# Whether to plot the spectrogram filtered bilinearily.
spectrogram.smoothing = true

# The lower bound of the static amplitude range give as logarithm of the power
# spectrum (log(real**2 + imag**2)).
spectrogram.minimumAmplitude = 30

# The upper bound of the static amplitude range give as logarithm of the power
# spectrum (log(real**2 + imag**2)).
spectrogram.maximumAmplitude = 120

# The lower bound of the frequency to be shown.
spectrogram.minimumFrequency = 0

# The upper bound of the frequency to be shown. Zero is a special value and
# means "auto" and sets the maximum frequency from the spectra.
spectrogram.maximumFrequency = Auto

# The time span of each data slice used to compute the frequency spectrum.
spectrogram.timeSpan = 4

# The overlap of the data time window between zero and one (exclusive).
spectrogram.overlap = 0.86

# Jet colormap
scheme.colors.spectrogram = 0.000:00007F,\
                            0.125:0000FF,\
                            0.250:007FFF,\
                            0.375:00FFFF,\
                            0.500:7FFF7F,\
                            0.625:FFFF00,\
                            0.750:FF7F00,\
                            0.875:FF0000,\
                            1.000:7F0000

# Magma colormap
#scheme.colors.spectrogram = 0.000:000004,\
#                            0.333:1d1147,\
#                            0.667:51127c,\
#                            0.375:832681,\
#                            0.500:b73779,\
#                            0.625:e75263,\
#                            0.750:fc8961,\
#                            0.875:fec488,\
#                            1.000:fcfdbf

